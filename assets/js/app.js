'use strict';

(function () {
	'use strict';

	svg4everybody();

	// MENU TRIGGER

	var menuTrig = document.querySelector('.menu__trigger');
	menuTrig.addEventListener('click', function () {
		var menuList = document.querySelector('.menu__list');

		if (menuList.classList.contains('opened')) {
			menuList.classList.remove('opened');
		} else {
			menuList.classList.add('opened');
		}
	});

	//  OWL.CAROUSEL

	$(".owl-carousel").owlCarousel({
		loop: true,
		margin: 10,
		nav: true,
		responsive: {
			0: {
				items: 1
			},

			480: {
				items: 3
			},

			1000: {
				items: 3
			}
		}
	});

	// ***** GRABDOWN ***** //

	var trig = document.querySelector('.header__link-down');
	trig.addEventListener('click', function () {
		var winHeight = $(window).innerHeight();
		$('html, body').animate({ scrollTop: winHeight }, 1500);
	});
})();

// LESS SPEED OF SCROLL
var scrollDebounce = function () {

	var debounce = function debounce(func) {
		var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
		var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

		var timeout;
		return function () {
			var context = this,
			    args = arguments;
			var later = function later() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};

	return {
		init: debounce
	};
}();
'use strict';

var headerAnimation = function () {

    var init = function init() {
        _setUpListners();
    };

    var _setUpListners = function _setUpListners() {
        window.addEventListener('load', _initialSet);
        window.addEventListener('scroll', scrollDebounce.init(_animatedLogo));
    };

    var tl = new TimelineMax(),
        section = document.querySelector('.feature'),
        featureSvg = document.querySelectorAll('.feature__svg'),
        featureSvgElements = document.querySelectorAll('.feature__svg-elem');

    function _initialSet() {
        TweenMax.set(featureSvg, { visibility: "hidden", opacity: 0, y: -100, rotation: 0 });
        TweenMax.set(featureSvgElements, { visibility: "hidden", opacity: 0, y: -100 });
    }

    function _animatedLogo() {

        var slideInAt = window.scrollY + window.innerHeight - section.clientHeight / 4;
        // bottom of the section
        var bottomSection = section.offsetTop + section.clientHeight;
        var isHalfShown = slideInAt > section.offsetTop;
        var isNotScrolledPast = window.scrollY < bottomSection;

        if (isHalfShown && isNotScrolledPast) {
            tl.staggerTo(featureSvg, 1, { visibility: "visible", opacity: 1, y: 0, ease: Bounce.easeOut }, 0.3).staggerTo(featureSvgElements, 1, { visibility: "visible", opacity: 1, y: 0, ease: Elastic.easeOut }, 0.3, '-=1.41');
        }
    };

    return {
        init: init
    };
}();
headerAnimation.init();
'use strict';

var headerAnimation = function () {

    var init = function init() {
        _setUpListners();
    };

    var _setUpListners = function _setUpListners() {
        window.addEventListener('load', _onLoad);
    };

    var tl = new TimelineMax(),
        navItems = document.querySelectorAll('.header__nav-link'),
        svgElements = document.querySelectorAll('.header__svg-elem'),
        trig = document.querySelector('.header__link-down'),
        heading = document.querySelector('.heading__text'),
        subHeading = document.querySelector('.subheading__text'),
        logo = document.querySelector('.header__logo');

    function _onLoad() {
        TweenMax.set(logo, { x: "-1000px" });
        TweenMax.set([heading, subHeading], { opacity: 0, y: "-30px" });
        TweenMax.set(navItems, { opacity: 0 });
        TweenMax.set(trig, { opacity: 0, y: "100px" });
        tl.to(logo, 3, { x: 0, ease: Elastic.easeOut }).to(heading, 1, { opacity: 1, y: 0, ease: Linear.easeNone }, "-=1").to(subHeading, 1, { opacity: 1, y: 0, ease: Linear.easeNone, onComplete: _animatedLogo });
    }

    function _animatedLogo() {
        var items = document.querySelectorAll('.header__svg');
        items.forEach(function (item) {
            item.classList.add('action');
        });
        tl.to(navItems, 0.5, { opacity: 1 }).staggerFromTo(svgElements, 2, { opacity: 0, scale: 0 }, { opacity: 1, scale: 1, ease: Elastic.easeOut }, 0.5).to(trig, 0.5, { opacity: 1, x: 0, y: 0, ease: Bounce.easeOut }, "-=1.5");
    };

    return {
        init: init
    };
}();
headerAnimation.init();
'use strict';

var skillsAnimation = function () {

    var init = function init() {
        _setUpListners();
    };

    var _setUpListners = function _setUpListners() {
        window.addEventListener('scroll', scrollDebounce.init(_animatedSkills));
    };

    var section = document.querySelector('.skills');

    function _animatedSkills() {

        var slideInAt = window.scrollY + window.innerHeight - section.clientHeight / 1.5;
        // bottom of the section
        var bottomSection = section.offsetTop + section.clientHeight;
        var isHalfShown = slideInAt > section.offsetTop;
        var isNotScrolledPast = window.scrollY < bottomSection;
        var progressLines = document.querySelectorAll('.skills__progress-line');

        if (isHalfShown && isNotScrolledPast) {
            progressLines.forEach(function (line) {
                var attrData = line.attributes['data-progress'].nodeValue;
                line.style.width = attrData;
            });
        } else {
            progressLines.forEach(function (line) {
                line.style.width = 0;
            });
        }
    };

    return {
        init: init
    };
}();
skillsAnimation.init();
'use strict';

var stickMenu = function () {

    var init = function init() {
        _setUpListners();
    };

    var _setUpListners = function _setUpListners() {
        $(window).on('scroll', _stick);
        $(window).on('resize', _refreshVar);
    };

    var menuPos, winPos, menuHeight;

    function _refreshVar() {
        menuPos = $('.menu').offset().top + 20;
        menuHeight = $('.menu').outerHeight(true);
    }

    $('<div class="clone-menu"></div>').insertBefore($('.menu')).css('height', menuHeight).hide();
    _refreshVar();

    function _stick() {
        winPos = $(window).scrollTop();

        if (winPos >= menuPos) {
            $('.menu').addClass('fixed shadow');
            $('.clone-menu').show();
        } else {
            $('.menu').removeClass('fixed shadow');
            $('.clone-menu').hide();
        }
    };

    return {
        init: init
    };
}();
stickMenu.init();
// // ***** tittle ***** //
//     const tl = new TimelineMax(),
//         tittle = document.querySelectorAll('.tittle'),
//         str = tittle[0].innerText;
//         console.log(str);

//     for (let i = 0; i < str.length; i++) {
//         var e = document.createElement("span");
//             e.innerHTML = str[i];
//             console.log(e);
//             tittle[0].appendChild(e);
//     };

//     const arrayOfLetters = document.querySelectorAll('.tittle > span');
//     arrayOfLetters.forEach(letter => {
//         TweenMax.set(letter, {opacity: 0, scale: 0});
//     });

//     tl.staggerTo(arrayOfLetters, 0.5, {opacity: 1, scale: 1, ease:Elastic.easeOut}, 0.2);
"use strict";
//# sourceMappingURL=data:application/json;base64,
